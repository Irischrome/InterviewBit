//Basiz idea is to keep a track of all the common characters present in strings of the vector. Store the first string as the prefix, then
//keep eliminating the non-common ones and reducing the prefix string. One place where I got stuck was to check if the current string is smaller
//then the prefix, then the loop will end and the prefix value will remain the same, without the decrement. So you have to check in the end
//if j is equal to the end of the string then update prefix to the smaller string

PROBLEM TO SOLVE - 


Given the array of strings A,
you need to find the longest string S which is the prefix of ALL the strings in the array.

Longest common prefix for a pair of strings S1 and S2 is the longest string S which is the prefix of both S1
and S2.

For Example, longest common prefix of "abcdefgh" and "abcefgh" is "abc".



Input Format

The only argument given is an array of strings A.

Output Format

Return longest common prefix of all strings in A.

For Example

Input 1:
    A = ["abcdefgh", "aefghijk", "abcefgh"]
Output 1:
    "a"
    Explanation 1:
        Longest common prefix of all the strings is "a".

Input 2:
    A = ["abab", "ab", "abcd"];
Output 2:
    "ab"
    Explanation 2:
        Longest common prefix of all the strings is "ab".




-------------ANSWER-------------

string Solution::longestCommonPrefix(vector<string> &A) {
    string prefix = A[0];
    for(int i=1;i<A.size();i++)
    {
        string temp = A[i].length() < prefix.length()? A[i] : prefix;
        for(int j=0;j<temp.size();j++)
        {
            if(prefix[j]!=A[i][j])
                {prefix = prefix.substr(0,j); break;}
            if(j == temp.size()-1)
                prefix = temp;
        }
    }
    return prefix;
}
