//In a matrix of N*M elements where N*M is odd, the median will be the (N*M+1)/2 element. Suppose in a 3*3 matrix, the median will be the 5th 
//element i.e (3*3+1)/2 element. So the approach to solve this problem is we take an element x, and check how many elements are smaller than it
//in the matrix. That looking for the count of smaller elements is done via binary search. But, the interesting part is you can easily use a 
//already present STL function *upper_bound* to do that for you. It returns the index of the next element if the element is not present and is
//between two indexes or if the element is present it returns that index. So we are going to first find the minimum and maximum element from the
//matrix, assume that their mean will be the median and then iterate over each row to see how many elements are smaller. We return mini as the 
//number of elements should be less than req which is the condition for assignment of min.

PROBLEM TO HANDLE - 



Given a N cross M matrix in which each row is sorted, find the overall median of the matrix. Assume N*M is odd.

For example,

Matrix=
[1, 3, 5]
[2, 6, 9]
[3, 6, 9]

A = [1, 2, 3, 3, 5, 6, 6, 9, 9]

Median is 5. So, we return 5.

Note: No extra memory is allowed.



----------ANSWER------------

int Solution::findMedian(vector<vector<int> > &A) {
    int r = A.size(), c = A[0].size(), mini  =INT_MAX, maxi = INT_MIN;
    int req = (r*c+1)/2;
    for(int i=0;i<r;i++)
    {
        mini = min(mini, A[i][0]); //AS THE ROWS ARE SORTED BUT THE COLUMNS ARE NOT, hence we find the min. and max.
        maxi = max(maxi, A[i][c-1]);
    }
    
    while(mini<maxi)
    {
        int mid = (mini+maxi)/2;
        int count = 0;
        for(int i=0;i<r;i++)
            count +=  upper_bound(A[i].begin(), A[i].end(), mid) - A[i].begin(); //as upper_bound returns an iterator, so to convert it to int
        
        if(count<req)
            mini = mid+1;
        else
            maxi = mid;
    }
    return mini;
    
}
